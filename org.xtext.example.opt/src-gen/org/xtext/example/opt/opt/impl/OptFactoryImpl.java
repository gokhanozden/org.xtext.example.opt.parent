/**
 * generated by Xtext 2.9.2
 */
package org.xtext.example.opt.opt.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.opt.opt.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class OptFactoryImpl extends EFactoryImpl implements OptFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static OptFactory init()
  {
    try
    {
      OptFactory theOptFactory = (OptFactory)EPackage.Registry.INSTANCE.getEFactory(OptPackage.eNS_URI);
      if (theOptFactory != null)
      {
        return theOptFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new OptFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OptFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case OptPackage.MODEL: return createModel();
      case OptPackage.TYPE: return createType();
      case OptPackage.OPTIMIZER: return createOptimizer();
      case OptPackage.OPTIMIZATION_METHOD: return createOptimizationMethod();
      case OptPackage.EVOLUTIONARY_STRATEGIES: return createEvolutionaryStrategies();
      case OptPackage.VARIABLE: return createVariable();
      case OptPackage.OBJECTIVE: return createObjective();
      case OptPackage.SIMULATION: return createSimulation();
      case OptPackage.EXPRESSION: return createExpression();
      case OptPackage.FUNCTION: return createFunction();
      case OptPackage.STOPPING_CRITERIA: return createStopping_Criteria();
      case OptPackage.CONVERGENCE: return createConvergence();
      case OptPackage.DURATION: return createDuration();
      case OptPackage.END_TIME: return createEndTime();
      case OptPackage.MAX_ITERATION: return createMaxIteration();
      case OptPackage.THRESHOLD: return createThreshold();
      case OptPackage.INT_CONSTANT: return createIntConstant();
      case OptPackage.DECIMAL_CONSTANT: return createDecimalConstant();
      case OptPackage.VARIABLE_REF: return createvariableRef();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case OptPackage.ES_STRATEGY:
        return createESStrategyFromString(eDataType, initialValue);
      case OptPackage.VARIABLE_GROUP:
        return createVariableGroupFromString(eDataType, initialValue);
      case OptPackage.VARIABLE_TYPE:
        return createVariableTypeFromString(eDataType, initialValue);
      case OptPackage.MIN_MAX:
        return createMinMaxFromString(eDataType, initialValue);
      case OptPackage.SIM_MODEL_TYPE:
        return createSimModelTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case OptPackage.ES_STRATEGY:
        return convertESStrategyToString(eDataType, instanceValue);
      case OptPackage.VARIABLE_GROUP:
        return convertVariableGroupToString(eDataType, instanceValue);
      case OptPackage.VARIABLE_TYPE:
        return convertVariableTypeToString(eDataType, instanceValue);
      case OptPackage.MIN_MAX:
        return convertMinMaxToString(eDataType, instanceValue);
      case OptPackage.SIM_MODEL_TYPE:
        return convertSimModelTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Optimizer createOptimizer()
  {
    OptimizerImpl optimizer = new OptimizerImpl();
    return optimizer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OptimizationMethod createOptimizationMethod()
  {
    OptimizationMethodImpl optimizationMethod = new OptimizationMethodImpl();
    return optimizationMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EvolutionaryStrategies createEvolutionaryStrategies()
  {
    EvolutionaryStrategiesImpl evolutionaryStrategies = new EvolutionaryStrategiesImpl();
    return evolutionaryStrategies;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Objective createObjective()
  {
    ObjectiveImpl objective = new ObjectiveImpl();
    return objective;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Simulation createSimulation()
  {
    SimulationImpl simulation = new SimulationImpl();
    return simulation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Stopping_Criteria createStopping_Criteria()
  {
    Stopping_CriteriaImpl stopping_Criteria = new Stopping_CriteriaImpl();
    return stopping_Criteria;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Convergence createConvergence()
  {
    ConvergenceImpl convergence = new ConvergenceImpl();
    return convergence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Duration createDuration()
  {
    DurationImpl duration = new DurationImpl();
    return duration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EndTime createEndTime()
  {
    EndTimeImpl endTime = new EndTimeImpl();
    return endTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MaxIteration createMaxIteration()
  {
    MaxIterationImpl maxIteration = new MaxIterationImpl();
    return maxIteration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Threshold createThreshold()
  {
    ThresholdImpl threshold = new ThresholdImpl();
    return threshold;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntConstant createIntConstant()
  {
    IntConstantImpl intConstant = new IntConstantImpl();
    return intConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DecimalConstant createDecimalConstant()
  {
    DecimalConstantImpl decimalConstant = new DecimalConstantImpl();
    return decimalConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public variableRef createvariableRef()
  {
    variableRefImpl variableRef = new variableRefImpl();
    return variableRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ESStrategy createESStrategyFromString(EDataType eDataType, String initialValue)
  {
    ESStrategy result = ESStrategy.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertESStrategyToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableGroup createVariableGroupFromString(EDataType eDataType, String initialValue)
  {
    VariableGroup result = VariableGroup.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertVariableGroupToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableType createVariableTypeFromString(EDataType eDataType, String initialValue)
  {
    VariableType result = VariableType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertVariableTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MinMax createMinMaxFromString(EDataType eDataType, String initialValue)
  {
    MinMax result = MinMax.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMinMaxToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimModelType createSimModelTypeFromString(EDataType eDataType, String initialValue)
  {
    SimModelType result = SimModelType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSimModelTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OptPackage getOptPackage()
  {
    return (OptPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static OptPackage getPackage()
  {
    return OptPackage.eINSTANCE;
  }

} //OptFactoryImpl
