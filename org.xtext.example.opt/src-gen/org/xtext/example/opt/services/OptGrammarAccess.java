/*
 * generated by Xtext 2.9.2
 */
package org.xtext.example.opt.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class OptGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsTypeParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=Type*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Type*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Type
		public RuleCall getElementsTypeParserRuleCall_0() { return cElementsTypeParserRuleCall_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOptimizerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSimulationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEvolutionaryStrategiesParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConvergenceParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDurationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEndTimeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cMaxIterationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cThresholdParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Type:
		//	Optimizer | Variable | Simulation | Function | EvolutionaryStrategies | Convergence | Duration | EndTime |
		//	MaxIteration | Threshold;
		@Override public ParserRule getRule() { return rule; }
		
		//Optimizer | Variable | Simulation | Function | EvolutionaryStrategies | Convergence | Duration | EndTime | MaxIteration
		//| Threshold
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Optimizer
		public RuleCall getOptimizerParserRuleCall_0() { return cOptimizerParserRuleCall_0; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
		
		//Simulation
		public RuleCall getSimulationParserRuleCall_2() { return cSimulationParserRuleCall_2; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_3() { return cFunctionParserRuleCall_3; }
		
		//EvolutionaryStrategies
		public RuleCall getEvolutionaryStrategiesParserRuleCall_4() { return cEvolutionaryStrategiesParserRuleCall_4; }
		
		//Convergence
		public RuleCall getConvergenceParserRuleCall_5() { return cConvergenceParserRuleCall_5; }
		
		//Duration
		public RuleCall getDurationParserRuleCall_6() { return cDurationParserRuleCall_6; }
		
		//EndTime
		public RuleCall getEndTimeParserRuleCall_7() { return cEndTimeParserRuleCall_7; }
		
		//MaxIteration
		public RuleCall getMaxIterationParserRuleCall_8() { return cMaxIterationParserRuleCall_8; }
		
		//Threshold
		public RuleCall getThresholdParserRuleCall_9() { return cThresholdParserRuleCall_9; }
	}
	public class OptimizerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.Optimizer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptimizerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cObjectiveKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cObjectiveAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cObjectiveObjectiveCrossReference_4_0 = (CrossReference)cObjectiveAssignment_4.eContents().get(0);
		private final RuleCall cObjectiveObjectiveIDTerminalRuleCall_4_0_1 = (RuleCall)cObjectiveObjectiveCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cStoppingcriteriaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStoppingcriteriaAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cStoppingcriteriaStopping_CriteriaCrossReference_7_0 = (CrossReference)cStoppingcriteriaAssignment_7.eContents().get(0);
		private final RuleCall cStoppingcriteriaStopping_CriteriaIDTerminalRuleCall_7_0_1 = (RuleCall)cStoppingcriteriaStopping_CriteriaCrossReference_7_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cOptimizationmethodKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cOptimizationmethodAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cOptimizationmethodOptimizationMethodCrossReference_10_0 = (CrossReference)cOptimizationmethodAssignment_10.eContents().get(0);
		private final RuleCall cOptimizationmethodOptimizationMethodIDTerminalRuleCall_10_0_1 = (RuleCall)cOptimizationmethodOptimizationMethodCrossReference_10_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cSeedKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cSeedAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cSeedINTTerminalRuleCall_13_0 = (RuleCall)cSeedAssignment_13.eContents().get(0);
		private final Keyword cSemicolonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cMinmaxKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cMinmaxAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cMinmaxMinMaxEnumRuleCall_16_0 = (RuleCall)cMinmaxAssignment_16.eContents().get(0);
		private final Keyword cSemicolonKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Keyword cRightCurlyBracketKeyword_18 = (Keyword)cGroup.eContents().get(18);
		
		//Optimizer:
		//	'optimizer' name=ID
		//	'{'
		//	'objective' objective=[Objective] ';'
		//	'stoppingcriteria' stoppingcriteria=[Stopping_Criteria] ';'
		//	'optimizationmethod' optimizationmethod=[OptimizationMethod] ';'
		//	'seed' seed=INT ';'
		//	'minmax' minmax=MinMax ';'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'optimizer' name=ID '{' 'objective' objective=[Objective] ';' 'stoppingcriteria' stoppingcriteria=[Stopping_Criteria]
		//';' 'optimizationmethod' optimizationmethod=[OptimizationMethod] ';' 'seed' seed=INT ';' 'minmax' minmax=MinMax ';'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'optimizer'
		public Keyword getOptimizerKeyword_0() { return cOptimizerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'objective'
		public Keyword getObjectiveKeyword_3() { return cObjectiveKeyword_3; }
		
		//objective=[Objective]
		public Assignment getObjectiveAssignment_4() { return cObjectiveAssignment_4; }
		
		//[Objective]
		public CrossReference getObjectiveObjectiveCrossReference_4_0() { return cObjectiveObjectiveCrossReference_4_0; }
		
		//ID
		public RuleCall getObjectiveObjectiveIDTerminalRuleCall_4_0_1() { return cObjectiveObjectiveIDTerminalRuleCall_4_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//'stoppingcriteria'
		public Keyword getStoppingcriteriaKeyword_6() { return cStoppingcriteriaKeyword_6; }
		
		//stoppingcriteria=[Stopping_Criteria]
		public Assignment getStoppingcriteriaAssignment_7() { return cStoppingcriteriaAssignment_7; }
		
		//[Stopping_Criteria]
		public CrossReference getStoppingcriteriaStopping_CriteriaCrossReference_7_0() { return cStoppingcriteriaStopping_CriteriaCrossReference_7_0; }
		
		//ID
		public RuleCall getStoppingcriteriaStopping_CriteriaIDTerminalRuleCall_7_0_1() { return cStoppingcriteriaStopping_CriteriaIDTerminalRuleCall_7_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
		
		//'optimizationmethod'
		public Keyword getOptimizationmethodKeyword_9() { return cOptimizationmethodKeyword_9; }
		
		//optimizationmethod=[OptimizationMethod]
		public Assignment getOptimizationmethodAssignment_10() { return cOptimizationmethodAssignment_10; }
		
		//[OptimizationMethod]
		public CrossReference getOptimizationmethodOptimizationMethodCrossReference_10_0() { return cOptimizationmethodOptimizationMethodCrossReference_10_0; }
		
		//ID
		public RuleCall getOptimizationmethodOptimizationMethodIDTerminalRuleCall_10_0_1() { return cOptimizationmethodOptimizationMethodIDTerminalRuleCall_10_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
		
		//'seed'
		public Keyword getSeedKeyword_12() { return cSeedKeyword_12; }
		
		//seed=INT
		public Assignment getSeedAssignment_13() { return cSeedAssignment_13; }
		
		//INT
		public RuleCall getSeedINTTerminalRuleCall_13_0() { return cSeedINTTerminalRuleCall_13_0; }
		
		//';'
		public Keyword getSemicolonKeyword_14() { return cSemicolonKeyword_14; }
		
		//'minmax'
		public Keyword getMinmaxKeyword_15() { return cMinmaxKeyword_15; }
		
		//minmax=MinMax
		public Assignment getMinmaxAssignment_16() { return cMinmaxAssignment_16; }
		
		//MinMax
		public RuleCall getMinmaxMinMaxEnumRuleCall_16_0() { return cMinmaxMinMaxEnumRuleCall_16_0; }
		
		//';'
		public Keyword getSemicolonKeyword_17() { return cSemicolonKeyword_17; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_18() { return cRightCurlyBracketKeyword_18; }
	}
	public class OptimizationMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.OptimizationMethod");
		private final RuleCall cEvolutionaryStrategiesParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OptimizationMethod:
		//	EvolutionaryStrategies;
		@Override public ParserRule getRule() { return rule; }
		
		//EvolutionaryStrategies
		public RuleCall getEvolutionaryStrategiesParserRuleCall() { return cEvolutionaryStrategiesParserRuleCall; }
	}
	public class EvolutionaryStrategiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.EvolutionaryStrategies");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEvolutionarystrategiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMuKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMuAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMuINTTerminalRuleCall_4_0 = (RuleCall)cMuAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLambdaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cLambdaAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLambdaINTTerminalRuleCall_7_0 = (RuleCall)cLambdaAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSigmaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cSigmaAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cSigmaDECIMALTerminalRuleCall_10_0 = (RuleCall)cSigmaAssignment_10.eContents().get(0);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cStrategyKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cStrategyAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cStrategyESStrategyEnumRuleCall_13_0 = (RuleCall)cStrategyAssignment_13.eContents().get(0);
		private final Keyword cSemicolonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//EvolutionaryStrategies:
		//	'evolutionarystrategies' name=ID
		//	'{'
		//	'mu' mu=INT ';'
		//	'lambda' lambda=INT ';'
		//	'sigma' sigma=DECIMAL ';'
		//	'strategy' strategy=ESStrategy ';'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'evolutionarystrategies' name=ID '{' 'mu' mu=INT ';' 'lambda' lambda=INT ';' 'sigma' sigma=DECIMAL ';' 'strategy'
		//strategy=ESStrategy ';' '}'
		public Group getGroup() { return cGroup; }
		
		//'evolutionarystrategies'
		public Keyword getEvolutionarystrategiesKeyword_0() { return cEvolutionarystrategiesKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'mu'
		public Keyword getMuKeyword_3() { return cMuKeyword_3; }
		
		//mu=INT
		public Assignment getMuAssignment_4() { return cMuAssignment_4; }
		
		//INT
		public RuleCall getMuINTTerminalRuleCall_4_0() { return cMuINTTerminalRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//'lambda'
		public Keyword getLambdaKeyword_6() { return cLambdaKeyword_6; }
		
		//lambda=INT
		public Assignment getLambdaAssignment_7() { return cLambdaAssignment_7; }
		
		//INT
		public RuleCall getLambdaINTTerminalRuleCall_7_0() { return cLambdaINTTerminalRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
		
		//'sigma'
		public Keyword getSigmaKeyword_9() { return cSigmaKeyword_9; }
		
		//sigma=DECIMAL
		public Assignment getSigmaAssignment_10() { return cSigmaAssignment_10; }
		
		//DECIMAL
		public RuleCall getSigmaDECIMALTerminalRuleCall_10_0() { return cSigmaDECIMALTerminalRuleCall_10_0; }
		
		//';'
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
		
		//'strategy'
		public Keyword getStrategyKeyword_12() { return cStrategyKeyword_12; }
		
		//strategy=ESStrategy
		public Assignment getStrategyAssignment_13() { return cStrategyAssignment_13; }
		
		//ESStrategy
		public RuleCall getStrategyESStrategyEnumRuleCall_13_0() { return cStrategyESStrategyEnumRuleCall_13_0; }
		
		//';'
		public Keyword getSemicolonKeyword_14() { return cSemicolonKeyword_14; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeVariableTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cGroupKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cGroupAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGroupVariableGroupEnumRuleCall_5_0 = (RuleCall)cGroupAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cLowValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLowValueDECIMALTerminalRuleCall_6_1_0 = (RuleCall)cLowValueAssignment_6_1.eContents().get(0);
		private final Keyword cCommaKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cHighValueAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cHighValueDECIMALTerminalRuleCall_6_3_0 = (RuleCall)cHighValueAssignment_6_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Variable:
		//	'variable' name=ID ':' type=VariableType 'group' group=VariableGroup ('[' lowValue=DECIMAL ',' highValue=DECIMAL
		//	']')? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'variable' name=ID ':' type=VariableType 'group' group=VariableGroup ('[' lowValue=DECIMAL ',' highValue=DECIMAL ']')?
		//';'
		public Group getGroup() { return cGroup; }
		
		//'variable'
		public Keyword getVariableKeyword_0() { return cVariableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=VariableType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//VariableType
		public RuleCall getTypeVariableTypeEnumRuleCall_3_0() { return cTypeVariableTypeEnumRuleCall_3_0; }
		
		//'group'
		public Keyword getGroupKeyword_4() { return cGroupKeyword_4; }
		
		//group=VariableGroup
		public Assignment getGroupAssignment_5() { return cGroupAssignment_5; }
		
		//VariableGroup
		public RuleCall getGroupVariableGroupEnumRuleCall_5_0() { return cGroupVariableGroupEnumRuleCall_5_0; }
		
		//('[' lowValue=DECIMAL ',' highValue=DECIMAL ']')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }
		
		//lowValue=DECIMAL
		public Assignment getLowValueAssignment_6_1() { return cLowValueAssignment_6_1; }
		
		//DECIMAL
		public RuleCall getLowValueDECIMALTerminalRuleCall_6_1_0() { return cLowValueDECIMALTerminalRuleCall_6_1_0; }
		
		//','
		public Keyword getCommaKeyword_6_2() { return cCommaKeyword_6_2; }
		
		//highValue=DECIMAL
		public Assignment getHighValueAssignment_6_3() { return cHighValueAssignment_6_3; }
		
		//DECIMAL
		public RuleCall getHighValueDECIMALTerminalRuleCall_6_3_0() { return cHighValueDECIMALTerminalRuleCall_6_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6_4() { return cRightSquareBracketKeyword_6_4; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class ObjectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.Objective");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimulationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Objective:
		//	Simulation | Function;
		@Override public ParserRule getRule() { return rule; }
		
		//Simulation | Function
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Simulation
		public RuleCall getSimulationParserRuleCall_0() { return cSimulationParserRuleCall_0; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }
	}
	public class SimulationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.Simulation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSimulationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cModelFolderKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cModelFileFolderPathAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModelFileFolderPathSTRINGTerminalRuleCall_4_0 = (RuleCall)cModelFileFolderPathAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cFunctionnameKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cFunctionNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cFunctionNameSTRINGTerminalRuleCall_7_0 = (RuleCall)cFunctionNameAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cInitializationKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cInitializationAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cInitializationSTRINGTerminalRuleCall_10_0 = (RuleCall)cInitializationAssignment_10.eContents().get(0);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cModelTypeKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cModelTypeAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cModelTypeSimModelTypeEnumRuleCall_13_0 = (RuleCall)cModelTypeAssignment_13.eContents().get(0);
		private final Keyword cSemicolonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//Simulation:
		//	'simulation' name=ID
		//	'{'
		//	'modelFolder' modelFileFolderPath=STRING ';'
		//	'functionname' functionName=STRING ';'
		//	'initialization' initialization=STRING ';'
		//	'modelType' modelType=SimModelType ';'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'simulation' name=ID '{' 'modelFolder' modelFileFolderPath=STRING ';' 'functionname' functionName=STRING ';'
		//'initialization' initialization=STRING ';' 'modelType' modelType=SimModelType ';' '}'
		public Group getGroup() { return cGroup; }
		
		//'simulation'
		public Keyword getSimulationKeyword_0() { return cSimulationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'modelFolder'
		public Keyword getModelFolderKeyword_3() { return cModelFolderKeyword_3; }
		
		//modelFileFolderPath=STRING
		public Assignment getModelFileFolderPathAssignment_4() { return cModelFileFolderPathAssignment_4; }
		
		//STRING
		public RuleCall getModelFileFolderPathSTRINGTerminalRuleCall_4_0() { return cModelFileFolderPathSTRINGTerminalRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//'functionname'
		public Keyword getFunctionnameKeyword_6() { return cFunctionnameKeyword_6; }
		
		//functionName=STRING
		public Assignment getFunctionNameAssignment_7() { return cFunctionNameAssignment_7; }
		
		//STRING
		public RuleCall getFunctionNameSTRINGTerminalRuleCall_7_0() { return cFunctionNameSTRINGTerminalRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
		
		//'initialization'
		public Keyword getInitializationKeyword_9() { return cInitializationKeyword_9; }
		
		//initialization=STRING
		public Assignment getInitializationAssignment_10() { return cInitializationAssignment_10; }
		
		//STRING
		public RuleCall getInitializationSTRINGTerminalRuleCall_10_0() { return cInitializationSTRINGTerminalRuleCall_10_0; }
		
		//';'
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
		
		//'modelType'
		public Keyword getModelTypeKeyword_12() { return cModelTypeKeyword_12; }
		
		//modelType=SimModelType
		public Assignment getModelTypeAssignment_13() { return cModelTypeAssignment_13; }
		
		//SimModelType
		public RuleCall getModelTypeSimModelTypeEnumRuleCall_13_0() { return cModelTypeSimModelTypeEnumRuleCall_13_0; }
		
		//';'
		public Keyword getSemicolonKeyword_14() { return cSemicolonKeyword_14; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPercentSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Operator:
		//	'+' | '-' | '*' | '/' | '%';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '*' | '/' | '%'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
		
		//'%'
		public Keyword getPercentSignKeyword_4() { return cPercentSignKeyword_4; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDecimalConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueDECIMALTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cVariableRefAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cVariableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_2_1_0 = (CrossReference)cVariableAssignment_2_1.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_2_1_0_1 = (RuleCall)cVariableVariableCrossReference_2_1_0.eContents().get(1);
		
		//Atomic Expression:
		//	{IntConstant} value=INT | {DecimalConstant} value=DECIMAL | {variableRef} variable=[Variable]
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=INT | {DecimalConstant} value=DECIMAL | {variableRef} variable=[Variable]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{DecimalConstant} value=DECIMAL
		public Group getGroup_1() { return cGroup_1; }
		
		//{DecimalConstant}
		public Action getDecimalConstantAction_1_0() { return cDecimalConstantAction_1_0; }
		
		//value=DECIMAL
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//DECIMAL
		public RuleCall getValueDECIMALTerminalRuleCall_1_1_0() { return cValueDECIMALTerminalRuleCall_1_1_0; }
		
		//{variableRef} variable=[Variable]
		public Group getGroup_2() { return cGroup_2; }
		
		//{variableRef}
		public Action getVariableRefAction_2_0() { return cVariableRefAction_2_0; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_2_1() { return cVariableAssignment_2_1; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_2_1_0() { return cVariableVariableCrossReference_2_1_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_2_1_0_1() { return cVariableVariableIDTerminalRuleCall_2_1_0_1; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFunction1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFunction1ExpressionParserRuleCall_3_0 = (RuleCall)cFunction1Assignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Function:
		//	'function' name=ID
		//	'{'
		//	function1=Expression ';'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=ID '{' function1=Expression ';' '}'
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//function1=Expression
		public Assignment getFunction1Assignment_3() { return cFunction1Assignment_3; }
		
		//Expression
		public RuleCall getFunction1ExpressionParserRuleCall_3_0() { return cFunction1ExpressionParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftAtomicParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorOperatorParserRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Expression:
		//	left=Atomic (operator=Operator right=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//left=Atomic (operator=Operator right=Expression)?
		public Group getGroup() { return cGroup; }
		
		//left=Atomic
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//Atomic
		public RuleCall getLeftAtomicParserRuleCall_0_0() { return cLeftAtomicParserRuleCall_0_0; }
		
		//(operator=Operator right=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_1_0_0() { return cOperatorOperatorParserRuleCall_1_0_0; }
		
		//right=Expression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_1_0() { return cRightExpressionParserRuleCall_1_1_0; }
	}
	public class Stopping_CriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.Stopping_Criteria");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConvergenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDurationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEndTimeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMaxIterationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cThresholdParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Stopping_Criteria:
		//	Convergence | Duration | EndTime | MaxIteration | Threshold;
		@Override public ParserRule getRule() { return rule; }
		
		//Convergence | Duration | EndTime | MaxIteration | Threshold
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Convergence
		public RuleCall getConvergenceParserRuleCall_0() { return cConvergenceParserRuleCall_0; }
		
		//Duration
		public RuleCall getDurationParserRuleCall_1() { return cDurationParserRuleCall_1; }
		
		//EndTime
		public RuleCall getEndTimeParserRuleCall_2() { return cEndTimeParserRuleCall_2; }
		
		//MaxIteration
		public RuleCall getMaxIterationParserRuleCall_3() { return cMaxIterationParserRuleCall_3; }
		
		//Threshold
		public RuleCall getThresholdParserRuleCall_4() { return cThresholdParserRuleCall_4; }
	}
	public class ConvergenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.Convergence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConvergenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cConvergencethresholdKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConvergenceThresholdAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConvergenceThresholdINTTerminalRuleCall_3_1_0 = (RuleCall)cConvergenceThresholdAssignment_3_1.eContents().get(0);
		private final Keyword cFullStopKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConvergencerangeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConvergencerangeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConvergencerangeINTTerminalRuleCall_4_1_0 = (RuleCall)cConvergencerangeAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Convergence:
		//	'convergence' name=ID
		//	'{' ('convergencethreshold' convergenceThreshold=INT '.' INT ';') ('convergencerange' convergencerange=INT ';')
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'convergence' name=ID '{' ('convergencethreshold' convergenceThreshold=INT '.' INT ';') ('convergencerange'
		//convergencerange=INT ';') '}'
		public Group getGroup() { return cGroup; }
		
		//'convergence'
		public Keyword getConvergenceKeyword_0() { return cConvergenceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('convergencethreshold' convergenceThreshold=INT '.' INT ';')
		public Group getGroup_3() { return cGroup_3; }
		
		//'convergencethreshold'
		public Keyword getConvergencethresholdKeyword_3_0() { return cConvergencethresholdKeyword_3_0; }
		
		//convergenceThreshold=INT
		public Assignment getConvergenceThresholdAssignment_3_1() { return cConvergenceThresholdAssignment_3_1; }
		
		//INT
		public RuleCall getConvergenceThresholdINTTerminalRuleCall_3_1_0() { return cConvergenceThresholdINTTerminalRuleCall_3_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_3_2() { return cFullStopKeyword_3_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_3() { return cINTTerminalRuleCall_3_3; }
		
		//';'
		public Keyword getSemicolonKeyword_3_4() { return cSemicolonKeyword_3_4; }
		
		//('convergencerange' convergencerange=INT ';')
		public Group getGroup_4() { return cGroup_4; }
		
		//'convergencerange'
		public Keyword getConvergencerangeKeyword_4_0() { return cConvergencerangeKeyword_4_0; }
		
		//convergencerange=INT
		public Assignment getConvergencerangeAssignment_4_1() { return cConvergencerangeAssignment_4_1; }
		
		//INT
		public RuleCall getConvergencerangeINTTerminalRuleCall_4_1_0() { return cConvergencerangeINTTerminalRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.Duration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDurationtimeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDurationtimeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDurationtimeSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDurationtimeAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Duration:
		//	'duration' name=ID
		//	'{' ('durationtime' durationtime=STRING ';')
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'duration' name=ID '{' ('durationtime' durationtime=STRING ';') '}'
		public Group getGroup() { return cGroup; }
		
		//'duration'
		public Keyword getDurationKeyword_0() { return cDurationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('durationtime' durationtime=STRING ';')
		public Group getGroup_3() { return cGroup_3; }
		
		//'durationtime'
		public Keyword getDurationtimeKeyword_3_0() { return cDurationtimeKeyword_3_0; }
		
		//durationtime=STRING
		public Assignment getDurationtimeAssignment_3_1() { return cDurationtimeAssignment_3_1; }
		
		//STRING
		public RuleCall getDurationtimeSTRINGTerminalRuleCall_3_1_0() { return cDurationtimeSTRINGTerminalRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EndTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.EndTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndtimeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEndtimeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEndtimeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEndtimeSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cEndtimeAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EndTime:
		//	'endtime' name=ID
		//	'{' ('endtime' endtime=STRING ';')
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'endtime' name=ID '{' ('endtime' endtime=STRING ';') '}'
		public Group getGroup() { return cGroup; }
		
		//'endtime'
		public Keyword getEndtimeKeyword_0() { return cEndtimeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('endtime' endtime=STRING ';')
		public Group getGroup_3() { return cGroup_3; }
		
		//'endtime'
		public Keyword getEndtimeKeyword_3_0() { return cEndtimeKeyword_3_0; }
		
		//endtime=STRING
		public Assignment getEndtimeAssignment_3_1() { return cEndtimeAssignment_3_1; }
		
		//STRING
		public RuleCall getEndtimeSTRINGTerminalRuleCall_3_1_0() { return cEndtimeSTRINGTerminalRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MaxIterationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.MaxIteration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxiterationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMaxiterationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMaxiterationINTTerminalRuleCall_3_0 = (RuleCall)cMaxiterationAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MaxIteration:
		//	'maxiteration' name=ID
		//	'{'
		//	maxiteration=INT ';'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'maxiteration' name=ID '{' maxiteration=INT ';' '}'
		public Group getGroup() { return cGroup; }
		
		//'maxiteration'
		public Keyword getMaxiterationKeyword_0() { return cMaxiterationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//maxiteration=INT
		public Assignment getMaxiterationAssignment_3() { return cMaxiterationAssignment_3; }
		
		//INT
		public RuleCall getMaxiterationINTTerminalRuleCall_3_0() { return cMaxiterationINTTerminalRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ThresholdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.Threshold");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThresholdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cThresholdvalueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cThresholdvalueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cThresholdvalueDECIMALTerminalRuleCall_3_1_0 = (RuleCall)cThresholdvalueAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Threshold:
		//	'threshold' name=ID
		//	'{' ('thresholdvalue' thresholdvalue=DECIMAL ';')
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'threshold' name=ID '{' ('thresholdvalue' thresholdvalue=DECIMAL ';') '}'
		public Group getGroup() { return cGroup; }
		
		//'threshold'
		public Keyword getThresholdKeyword_0() { return cThresholdKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('thresholdvalue' thresholdvalue=DECIMAL ';')
		public Group getGroup_3() { return cGroup_3; }
		
		//'thresholdvalue'
		public Keyword getThresholdvalueKeyword_3_0() { return cThresholdvalueKeyword_3_0; }
		
		//thresholdvalue=DECIMAL
		public Assignment getThresholdvalueAssignment_3_1() { return cThresholdvalueAssignment_3_1; }
		
		//DECIMAL
		public RuleCall getThresholdvalueDECIMALTerminalRuleCall_3_1_0() { return cThresholdvalueDECIMALTerminalRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	public class ESStrategyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.ESStrategy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCOMMAEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCOMMACOMMAKeyword_0_0 = (Keyword)cCOMMAEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPLUSPLUSKeyword_1_0 = (Keyword)cPLUSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ESStrategy:
		//	COMMA | PLUS;
		public EnumRule getRule() { return rule; }
		
		//COMMA | PLUS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//COMMA
		public EnumLiteralDeclaration getCOMMAEnumLiteralDeclaration_0() { return cCOMMAEnumLiteralDeclaration_0; }
		
		//"COMMA"
		public Keyword getCOMMACOMMAKeyword_0_0() { return cCOMMACOMMAKeyword_0_0; }
		
		//PLUS
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_1() { return cPLUSEnumLiteralDeclaration_1; }
		
		//"PLUS"
		public Keyword getPLUSPLUSKeyword_1_0() { return cPLUSPLUSKeyword_1_0; }
	}
	public class VariableGroupElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.VariableGroup");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFACTOREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFACTORFACTORKeyword_0_0 = (Keyword)cFACTOREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRESPONSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRESPONSERESPONSEKeyword_1_0 = (Keyword)cRESPONSEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum VariableGroup:
		//	FACTOR | RESPONSE;
		public EnumRule getRule() { return rule; }
		
		//FACTOR | RESPONSE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FACTOR
		public EnumLiteralDeclaration getFACTOREnumLiteralDeclaration_0() { return cFACTOREnumLiteralDeclaration_0; }
		
		//"FACTOR"
		public Keyword getFACTORFACTORKeyword_0_0() { return cFACTORFACTORKeyword_0_0; }
		
		//RESPONSE
		public EnumLiteralDeclaration getRESPONSEEnumLiteralDeclaration_1() { return cRESPONSEEnumLiteralDeclaration_1; }
		
		//"RESPONSE"
		public Keyword getRESPONSERESPONSEKeyword_1_0() { return cRESPONSERESPONSEKeyword_1_0; }
	}
	public class VariableTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.VariableType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBOOLEANBOOLEANKeyword_0_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTEGERINTEGERKeyword_1_0 = (Keyword)cINTEGEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDECIMALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDECIMALDECIMALKeyword_2_0 = (Keyword)cDECIMALEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSTRINGSTRINGKeyword_3_0 = (Keyword)cSTRINGEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum VariableType:
		//	BOOLEAN | INTEGER | DECIMAL | STRING;
		public EnumRule getRule() { return rule; }
		
		//BOOLEAN | INTEGER | DECIMAL | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BOOLEAN
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_0() { return cBOOLEANEnumLiteralDeclaration_0; }
		
		//"BOOLEAN"
		public Keyword getBOOLEANBOOLEANKeyword_0_0() { return cBOOLEANBOOLEANKeyword_0_0; }
		
		//INTEGER
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration_1() { return cINTEGEREnumLiteralDeclaration_1; }
		
		//"INTEGER"
		public Keyword getINTEGERINTEGERKeyword_1_0() { return cINTEGERINTEGERKeyword_1_0; }
		
		//DECIMAL
		public EnumLiteralDeclaration getDECIMALEnumLiteralDeclaration_2() { return cDECIMALEnumLiteralDeclaration_2; }
		
		//"DECIMAL"
		public Keyword getDECIMALDECIMALKeyword_2_0() { return cDECIMALDECIMALKeyword_2_0; }
		
		//STRING
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_3() { return cSTRINGEnumLiteralDeclaration_3; }
		
		//"STRING"
		public Keyword getSTRINGSTRINGKeyword_3_0() { return cSTRINGSTRINGKeyword_3_0; }
	}
	public class MinMaxElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.MinMax");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMinEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMinMinKeyword_0_0 = (Keyword)cMinEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMaxEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMaxMaxKeyword_1_0 = (Keyword)cMaxEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MinMax:
		//	Min | Max;
		public EnumRule getRule() { return rule; }
		
		//Min | Max
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Min
		public EnumLiteralDeclaration getMinEnumLiteralDeclaration_0() { return cMinEnumLiteralDeclaration_0; }
		
		//"Min"
		public Keyword getMinMinKeyword_0_0() { return cMinMinKeyword_0_0; }
		
		//Max
		public EnumLiteralDeclaration getMaxEnumLiteralDeclaration_1() { return cMaxEnumLiteralDeclaration_1; }
		
		//"Max"
		public Keyword getMaxMaxKeyword_1_0() { return cMaxMaxKeyword_1_0; }
	}
	public class SimModelTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.SimModelType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTATICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTATICSTATICKeyword_0_0 = (Keyword)cSTATICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCONTINUOUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCONTINUOUSCONTINUOUSKeyword_1_0 = (Keyword)cCONTINUOUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDISCRETEEVENTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDISCRETEEVENTDISCRETEEVENTKeyword_2_0 = (Keyword)cDISCRETEEVENTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SimModelType:
		//	STATIC | CONTINUOUS | DISCRETEEVENT;
		public EnumRule getRule() { return rule; }
		
		//STATIC | CONTINUOUS | DISCRETEEVENT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STATIC
		public EnumLiteralDeclaration getSTATICEnumLiteralDeclaration_0() { return cSTATICEnumLiteralDeclaration_0; }
		
		//"STATIC"
		public Keyword getSTATICSTATICKeyword_0_0() { return cSTATICSTATICKeyword_0_0; }
		
		//CONTINUOUS
		public EnumLiteralDeclaration getCONTINUOUSEnumLiteralDeclaration_1() { return cCONTINUOUSEnumLiteralDeclaration_1; }
		
		//"CONTINUOUS"
		public Keyword getCONTINUOUSCONTINUOUSKeyword_1_0() { return cCONTINUOUSCONTINUOUSKeyword_1_0; }
		
		//DISCRETEEVENT
		public EnumLiteralDeclaration getDISCRETEEVENTEnumLiteralDeclaration_2() { return cDISCRETEEVENTEnumLiteralDeclaration_2; }
		
		//"DISCRETEEVENT"
		public Keyword getDISCRETEEVENTDISCRETEEVENTKeyword_2_0() { return cDISCRETEEVENTDISCRETEEVENTKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final TypeElements pType;
	private final OptimizerElements pOptimizer;
	private final OptimizationMethodElements pOptimizationMethod;
	private final EvolutionaryStrategiesElements pEvolutionaryStrategies;
	private final ESStrategyElements eESStrategy;
	private final VariableElements pVariable;
	private final VariableGroupElements eVariableGroup;
	private final VariableTypeElements eVariableType;
	private final ObjectiveElements pObjective;
	private final MinMaxElements eMinMax;
	private final SimulationElements pSimulation;
	private final OperatorElements pOperator;
	private final AtomicElements pAtomic;
	private final FunctionElements pFunction;
	private final ExpressionElements pExpression;
	private final SimModelTypeElements eSimModelType;
	private final TerminalRule tDECIMAL;
	private final Stopping_CriteriaElements pStopping_Criteria;
	private final ConvergenceElements pConvergence;
	private final DurationElements pDuration;
	private final EndTimeElements pEndTime;
	private final MaxIterationElements pMaxIteration;
	private final ThresholdElements pThreshold;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OptGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pType = new TypeElements();
		this.pOptimizer = new OptimizerElements();
		this.pOptimizationMethod = new OptimizationMethodElements();
		this.pEvolutionaryStrategies = new EvolutionaryStrategiesElements();
		this.eESStrategy = new ESStrategyElements();
		this.pVariable = new VariableElements();
		this.eVariableGroup = new VariableGroupElements();
		this.eVariableType = new VariableTypeElements();
		this.pObjective = new ObjectiveElements();
		this.eMinMax = new MinMaxElements();
		this.pSimulation = new SimulationElements();
		this.pOperator = new OperatorElements();
		this.pAtomic = new AtomicElements();
		this.pFunction = new FunctionElements();
		this.pExpression = new ExpressionElements();
		this.eSimModelType = new SimModelTypeElements();
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.opt.Opt.DECIMAL");
		this.pStopping_Criteria = new Stopping_CriteriaElements();
		this.pConvergence = new ConvergenceElements();
		this.pDuration = new DurationElements();
		this.pEndTime = new EndTimeElements();
		this.pMaxIteration = new MaxIterationElements();
		this.pThreshold = new ThresholdElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.opt.Opt".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=Type*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Type:
	//	Optimizer | Variable | Simulation | Function | EvolutionaryStrategies | Convergence | Duration | EndTime |
	//	MaxIteration | Threshold;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Optimizer:
	//	'optimizer' name=ID
	//	'{'
	//	'objective' objective=[Objective] ';'
	//	'stoppingcriteria' stoppingcriteria=[Stopping_Criteria] ';'
	//	'optimizationmethod' optimizationmethod=[OptimizationMethod] ';'
	//	'seed' seed=INT ';'
	//	'minmax' minmax=MinMax ';'
	//	'}';
	public OptimizerElements getOptimizerAccess() {
		return pOptimizer;
	}
	
	public ParserRule getOptimizerRule() {
		return getOptimizerAccess().getRule();
	}
	
	//OptimizationMethod:
	//	EvolutionaryStrategies;
	public OptimizationMethodElements getOptimizationMethodAccess() {
		return pOptimizationMethod;
	}
	
	public ParserRule getOptimizationMethodRule() {
		return getOptimizationMethodAccess().getRule();
	}
	
	//EvolutionaryStrategies:
	//	'evolutionarystrategies' name=ID
	//	'{'
	//	'mu' mu=INT ';'
	//	'lambda' lambda=INT ';'
	//	'sigma' sigma=DECIMAL ';'
	//	'strategy' strategy=ESStrategy ';'
	//	'}';
	public EvolutionaryStrategiesElements getEvolutionaryStrategiesAccess() {
		return pEvolutionaryStrategies;
	}
	
	public ParserRule getEvolutionaryStrategiesRule() {
		return getEvolutionaryStrategiesAccess().getRule();
	}
	
	//enum ESStrategy:
	//	COMMA | PLUS;
	public ESStrategyElements getESStrategyAccess() {
		return eESStrategy;
	}
	
	public EnumRule getESStrategyRule() {
		return getESStrategyAccess().getRule();
	}
	
	//Variable:
	//	'variable' name=ID ':' type=VariableType 'group' group=VariableGroup ('[' lowValue=DECIMAL ',' highValue=DECIMAL
	//	']')? ';';
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//enum VariableGroup:
	//	FACTOR | RESPONSE;
	public VariableGroupElements getVariableGroupAccess() {
		return eVariableGroup;
	}
	
	public EnumRule getVariableGroupRule() {
		return getVariableGroupAccess().getRule();
	}
	
	//enum VariableType:
	//	BOOLEAN | INTEGER | DECIMAL | STRING;
	public VariableTypeElements getVariableTypeAccess() {
		return eVariableType;
	}
	
	public EnumRule getVariableTypeRule() {
		return getVariableTypeAccess().getRule();
	}
	
	//Objective:
	//	Simulation | Function;
	public ObjectiveElements getObjectiveAccess() {
		return pObjective;
	}
	
	public ParserRule getObjectiveRule() {
		return getObjectiveAccess().getRule();
	}
	
	//enum MinMax:
	//	Min | Max;
	public MinMaxElements getMinMaxAccess() {
		return eMinMax;
	}
	
	public EnumRule getMinMaxRule() {
		return getMinMaxAccess().getRule();
	}
	
	//Simulation:
	//	'simulation' name=ID
	//	'{'
	//	'modelFolder' modelFileFolderPath=STRING ';'
	//	'functionname' functionName=STRING ';'
	//	'initialization' initialization=STRING ';'
	//	'modelType' modelType=SimModelType ';'
	//	'}';
	public SimulationElements getSimulationAccess() {
		return pSimulation;
	}
	
	public ParserRule getSimulationRule() {
		return getSimulationAccess().getRule();
	}
	
	//Operator:
	//	'+' | '-' | '*' | '/' | '%';
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Atomic Expression:
	//	{IntConstant} value=INT | {DecimalConstant} value=DECIMAL | {variableRef} variable=[Variable]
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//Function:
	//	'function' name=ID
	//	'{'
	//	function1=Expression ';'
	//	'}';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Expression:
	//	left=Atomic (operator=Operator right=Expression)?;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//enum SimModelType:
	//	STATIC | CONTINUOUS | DISCRETEEVENT;
	public SimModelTypeElements getSimModelTypeAccess() {
		return eSimModelType;
	}
	
	public EnumRule getSimModelTypeRule() {
		return getSimModelTypeAccess().getRule();
	}
	
	//terminal DECIMAL:
	//	'-'? INT* '.' INT+;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//Stopping_Criteria:
	//	Convergence | Duration | EndTime | MaxIteration | Threshold;
	public Stopping_CriteriaElements getStopping_CriteriaAccess() {
		return pStopping_Criteria;
	}
	
	public ParserRule getStopping_CriteriaRule() {
		return getStopping_CriteriaAccess().getRule();
	}
	
	//Convergence:
	//	'convergence' name=ID
	//	'{' ('convergencethreshold' convergenceThreshold=INT '.' INT ';') ('convergencerange' convergencerange=INT ';')
	//	'}';
	public ConvergenceElements getConvergenceAccess() {
		return pConvergence;
	}
	
	public ParserRule getConvergenceRule() {
		return getConvergenceAccess().getRule();
	}
	
	//Duration:
	//	'duration' name=ID
	//	'{' ('durationtime' durationtime=STRING ';')
	//	'}';
	public DurationElements getDurationAccess() {
		return pDuration;
	}
	
	public ParserRule getDurationRule() {
		return getDurationAccess().getRule();
	}
	
	//EndTime:
	//	'endtime' name=ID
	//	'{' ('endtime' endtime=STRING ';')
	//	'}';
	public EndTimeElements getEndTimeAccess() {
		return pEndTime;
	}
	
	public ParserRule getEndTimeRule() {
		return getEndTimeAccess().getRule();
	}
	
	//MaxIteration:
	//	'maxiteration' name=ID
	//	'{'
	//	maxiteration=INT ';'
	//	'}';
	public MaxIterationElements getMaxIterationAccess() {
		return pMaxIteration;
	}
	
	public ParserRule getMaxIterationRule() {
		return getMaxIterationAccess().getRule();
	}
	
	//Threshold:
	//	'threshold' name=ID
	//	'{' ('thresholdvalue' thresholdvalue=DECIMAL ';')
	//	'}';
	public ThresholdElements getThresholdAccess() {
		return pThreshold;
	}
	
	public ParserRule getThresholdRule() {
		return getThresholdAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
