/**
 * generated by Xtext 2.9.2
 */
package org.xtext.example.opt.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.common.collect.Iterators;
import java.util.Iterator;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.nodemodel.ICompositeNode;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.xtext.example.opt.opt.EvolutionaryStrategies;
import org.xtext.example.opt.opt.MaxIteration;
import org.xtext.example.opt.opt.Objective;
import org.xtext.example.opt.opt.Optimizer;
import org.xtext.example.opt.opt.Variable;
import org.xtext.example.opt.opt.VariableType;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class OptGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterator<EvolutionaryStrategies> _filter = Iterators.<EvolutionaryStrategies>filter(_allContents, EvolutionaryStrategies.class);
    EvolutionaryStrategies _head = IteratorExtensions.<EvolutionaryStrategies>head(_filter);
    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
    Iterator<Optimizer> _filter_1 = Iterators.<Optimizer>filter(_allContents_1, Optimizer.class);
    Optimizer _head_1 = IteratorExtensions.<Optimizer>head(_filter_1);
    TreeIterator<EObject> _allContents_2 = resource.getAllContents();
    Iterator<MaxIteration> _filter_2 = Iterators.<MaxIteration>filter(_allContents_2, MaxIteration.class);
    MaxIteration _head_2 = IteratorExtensions.<MaxIteration>head(_filter_2);
    TreeIterator<EObject> _allContents_3 = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents_3);
    Iterable<Variable> _filter_3 = Iterables.<Variable>filter(_iterable, Variable.class);
    CharSequence _ES = this.ES(_head, _head_1, _head_2, _filter_3);
    fsa.generateFile("ES.java", _ES);
    TreeIterator<EObject> _allContents_4 = resource.getAllContents();
    Iterator<EvolutionaryStrategies> _filter_4 = Iterators.<EvolutionaryStrategies>filter(_allContents_4, EvolutionaryStrategies.class);
    EvolutionaryStrategies _head_3 = IteratorExtensions.<EvolutionaryStrategies>head(_filter_4);
    TreeIterator<EObject> _allContents_5 = resource.getAllContents();
    Iterator<Optimizer> _filter_5 = Iterators.<Optimizer>filter(_allContents_5, Optimizer.class);
    Optimizer _head_4 = IteratorExtensions.<Optimizer>head(_filter_5);
    TreeIterator<EObject> _allContents_6 = resource.getAllContents();
    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_6);
    Iterable<Variable> _filter_6 = Iterables.<Variable>filter(_iterable_1, Variable.class);
    CharSequence _solution = this.solution(_head_3, _head_4, _filter_6);
    fsa.generateFile("solution.java", _solution);
    CharSequence _Main = this.Main();
    fsa.generateFile("Main.java", _Main);
  }
  
  public CharSequence ES(final EvolutionaryStrategies es, final Optimizer op, final MaxIteration maxit, final Iterable<Variable> myvars) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Arrays;");
    _builder.newLine();
    _builder.append("import java.util.Random;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ES ");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private solution[] parents;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int mu = ");
    int _mu = es.getMu();
    _builder.append(_mu, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private int lambda = ");
    int _lambda = es.getLambda();
    _builder.append(_lambda, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private double sigma = ");
    String _sigma = es.getSigma();
    _builder.append(_sigma, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private int maxIteration = ");
    int _maxiteration = maxit.getMaxiteration();
    _builder.append(_maxiteration, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private int success;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int totaliteration;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int counter;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Random rand;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int seed = ");
    int _seed = op.getSeed();
    _builder.append(_seed, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ES()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("rand = new Random(seed);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void createInitialPopulation()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("parents = new solution[mu];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(int i = 0; i < mu; i++)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("solution tmp = new solution();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//Randomly create all the parameters between their lower and upper limits");
    _builder.newLine();
    _builder.append("\t\t\t");
    final List<Variable> mylist = CollectionLiterals.<Variable>newArrayList();
    _builder.newLineIfNotEmpty();
    {
      for(final Variable variable : myvars) {
        _builder.append("\t\t\t");
        String _name = variable.getName();
        String _plus = ("tmp." + _name);
        String _plus_1 = (_plus + " = uniformrandom(tmp.");
        String _name_1 = variable.getName();
        String _plus_2 = (_plus_1 + _name_1);
        String _plus_3 = (_plus_2 + "_lb");
        String _plus_4 = (_plus_3 + ", tmp.");
        String _name_2 = variable.getName();
        String _plus_5 = (_plus_4 + _name_2);
        String _plus_6 = (_plus_5 + "_ub);");
        _builder.append(_plus_6, "\t\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        Object _xblockexpression = null;
        {
          mylist.add(variable);
          _xblockexpression = null;
        }
        _builder.append(_xblockexpression, "\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("parents[i] = tmp;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void Solve()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int counter1 = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(int i = 0; i < maxIteration; i++)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(counter1 == counter)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if((double)success / (double)totaliteration > 0.2)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("sigma = sigma / 0.85;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("sigma = sigma * 0.85;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("counter1 = 0;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("success = 0;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("totaliteration = 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("counter1++;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("evolution();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void evolution()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int[] parent = new int[lambda];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int allpopulationsize = lambda + mu;//lambda + M strategy");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("solution[] tmppopulation = new solution[allpopulationsize];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//Copy parents to the tmppopulation");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 0; i < mu; i++)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tmppopulation[i] = parents[i];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 0; i < lambda; i++)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int index = i + mu;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("solution child = new solution();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("parent[i] = (int)Math.round(i * mu / lambda);");
    _builder.newLine();
    {
      for(final Variable variable_1 : mylist) {
        _builder.append("\t\t\t");
        String _xifexpression = null;
        VariableType _type = variable_1.getType();
        boolean _equals = Objects.equal(_type, VariableType.INTEGER);
        if (_equals) {
          String _name_3 = variable_1.getName();
          String _plus_7 = ("child." + _name_3);
          String _plus_8 = (_plus_7 + " = parents[parent[i]].");
          String _name_4 = variable_1.getName();
          String _plus_9 = (_plus_8 + _name_4);
          _xifexpression = (_plus_9 + " + normalDistInt(0, sigma);");
        }
        _builder.append(_xifexpression, "\t\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        String _xifexpression_1 = null;
        VariableType _type_1 = variable_1.getType();
        boolean _equals_1 = Objects.equal(_type_1, VariableType.DECIMAL);
        if (_equals_1) {
          String _name_5 = variable_1.getName();
          String _plus_10 = ("child." + _name_5);
          String _plus_11 = (_plus_10 + " = parents[parent[i]].");
          String _name_6 = variable_1.getName();
          String _plus_12 = (_plus_11 + _name_6);
          _xifexpression_1 = (_plus_12 + " + normalDistDouble(0, sigma);");
        }
        _builder.append(_xifexpression_1, "\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tmppopulation[index] = child;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (child.getCost() < parents[parent[i]].getCost())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("success++;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("totaliteration++;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("tmppopulation = sortPopulation(tmppopulation);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 0; i < mu; i++)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("parents[i] = tmppopulation[i];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private solution[] sortPopulation(solution[] notSortedPopulation)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Arrays.sort(notSortedPopulation);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return notSortedPopulation;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public double getCost()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//return cost of best solution in population");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return parents[0].getCost();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//Uniformly distributed integer random number generator with parameter mean and sigma");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int uniformrandom(int minval, int maxval)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int randomNum = minval + rand.nextInt(maxval - minval);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return randomNum;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//Uniformly distributed float random number generator with parameter mean and sigma");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private float uniformrandom(float minval, float maxval)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("float randomNum = minval + (maxval - minval) * rand.nextFloat();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return randomNum;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//Uniformly distributed double random number generator with parameter mean and sigma");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private double uniformrandom(double minval, double maxval)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("double randomNum = minval + (maxval - minval) * rand.nextDouble();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return randomNum;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int normalDistInt(double mean, double sigma)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int size = 12;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int precision = 1000000;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("double Z = 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int Q = 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("double[] U = new double[size];");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(int i = 0; i < size; i++)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("U[i] = (double)rand.nextInt(precision) / precision;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(int i = 0; i < size; i++)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Z = Z + U[i];");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Z = Z - size / 2;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Q = (int)(mean + sigma * Z);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Q;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private float normalDistFloat(double mean, double sigma)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int size = 12;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int precision = 1000000;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("double Z = 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("float Q = 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("double[] U = new double[size];");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(int i = 0; i < size; i++)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("U[i] = (double)rand.nextInt(precision) / precision;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(int i = 0; i < size; i++)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Z = Z + U[i];");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Z = Z - size / 2;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Q = (float)(mean + sigma * Z);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Q;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private double normalDistDouble(double mean, double sigma)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int size = 12;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int precision = 1000000;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("double Z = 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("double Q = 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("double[] U = new double[size];");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(int i = 0; i < size; i++)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("U[i] = (double)rand.nextInt(precision) / precision;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(int i = 0; i < size; i++)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Z = Z + U[i];");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Z = Z - size / 2;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Q = (double)(mean + sigma * Z);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Q;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence solution(final EvolutionaryStrategies es, final Optimizer op, final Iterable<Variable> myvars) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class solution implements Comparable<solution>");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    {
      for(final Variable variable : myvars) {
        _builder.append("\t");
        _builder.append("public ");
        Object _PrintType = this.PrintType(variable);
        _builder.append(_PrintType, "\t");
        _builder.append(" ");
        String _name = variable.getName();
        _builder.append(_name, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("public ");
        Object _PrintType_1 = this.PrintType(variable);
        _builder.append(_PrintType_1, "\t");
        _builder.append(" ");
        String _name_1 = variable.getName();
        _builder.append(_name_1, "\t");
        _builder.append("_lb = ");
        String _lowValue = variable.getLowValue();
        _builder.append(_lowValue, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("public ");
        Object _PrintType_2 = this.PrintType(variable);
        _builder.append(_PrintType_2, "\t");
        _builder.append(" ");
        String _name_2 = variable.getName();
        _builder.append(_name_2, "\t");
        _builder.append("_ub = ");
        String _highValue = variable.getHighValue();
        _builder.append(_highValue, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("private double cost = Double.MAX_VALUE;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public solution()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public double getCost()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (cost == Double.MAX_VALUE)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("cost = ");
    Objective _objective = op.getObjective();
    EList<EObject> _eContents = _objective.eContents();
    final Function1<EObject, String> _function = (EObject it) -> {
      StringConcatenation _builder_1 = new StringConcatenation();
      ICompositeNode _node = NodeModelUtils.getNode(it);
      String _tokenText = NodeModelUtils.getTokenText(_node);
      _builder_1.append(_tokenText, "");
      return _builder_1.toString();
    };
    List<String> _map = ListExtensions.<EObject, String>map(_eContents, _function);
    String _join = IterableExtensions.join(_map, "\n");
    _builder.append(_join, "\t\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("return cost;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return cost;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int compareTo(solution sol)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Double.valueOf(this.getCost()).compareTo(Double.valueOf(sol.getCost()));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence Main() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class Main");
    _builder.newLine();
    _builder.append("{\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ES myES = new ES();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("myES.createInitialPopulation();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("myES.Solve();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(myES.getCost());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public Object PrintType(final Variable myvar) {
    Object _xifexpression = null;
    VariableType _type = myvar.getType();
    boolean _equals = Objects.equal(_type, VariableType.BOOLEAN);
    if (_equals) {
      _xifexpression = "boolean";
    } else {
      Object _xifexpression_1 = null;
      VariableType _type_1 = myvar.getType();
      boolean _equals_1 = Objects.equal(_type_1, VariableType.INTEGER);
      if (_equals_1) {
        _xifexpression_1 = "int";
      } else {
        Object _xifexpression_2 = null;
        VariableType _type_2 = myvar.getType();
        boolean _equals_2 = Objects.equal(_type_2, VariableType.STRING);
        if (_equals_2) {
          _xifexpression_2 = "String";
        } else {
          Object _xifexpression_3 = null;
          VariableType _type_3 = myvar.getType();
          boolean _equals_3 = Objects.equal(_type_3, VariableType.DECIMAL);
          if (_equals_3) {
            _xifexpression_3 = "double";
          } else {
            _xifexpression_3 = myvar.getType();
          }
          _xifexpression_2 = ((Object)_xifexpression_3);
        }
        _xifexpression_1 = ((Object)_xifexpression_2);
      }
      _xifexpression = ((Object)_xifexpression_1);
    }
    return _xifexpression;
  }
  
  public Object Sim(final Objective myob) {
    return null;
  }
}
